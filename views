---VIEWS
--Нам потрібні всі юзери. Нам потрібно знати,скільки кожен юзер зробив замовлень

/*
CREATE VIEW name AS (
    query....
)
*/

CREATE OR REPLACE VIEW users_orders_amount AS (
    SELECT u.id, first_name, last_name, email, count(o.id) AS orders_amount FROM
    users AS u LEFT JOIN orders AS o
    ON u.id = o.customer_id
    GROUP BY u.id
    ORDER BY orders_amount
    );

SELECT * FROM users_orders_amount;

DROP VIEW users_orders_amount;

--Витягти всі email юзерів, які мають тільки 1 замовлення
SELECT * FROM users_orders_amount
WHERE orders_amount = 1;


--Створити представлення, яке зберігає замовлення з їхньою вартістю
CREATE VIEW orders_with_price AS (
    SELECT o.id, o.customer_id, sum(p.price * otp.quantity), o.status FROM 
    orders AS o INNER JOIN orders_to_products AS otp
    ON o.id = otp.order_id
    INNER JOIN products AS p
    ON otp.product_id = p.id
    GROUP BY o.id
);

--На основі вьюхи orders_with_price
--Вивести юзерів з сумою коштів, які вони витратили у нашому магазині
CREATE VIEW users_with_sum AS (
SELECT u.id, first_name, last_name, email, sum(owp.sum) FROM 
users AS u JOIN orders_with_price AS owp
ON u.id = owp.customer_id
GROUP BY u.id
);

SELECT * FROM users_with_sum
ORDER BY sum DESC
LIMIT 10;



-- Materialized Views

--Задача: написати матеріалізовану вьюху, яка буде рахувати кількість замовлень

CREATE MATERIALIZED VIEW total_orders AS
SELECT count(*) AS "загальна кількість замовлень" FROM orders;

SELECT * FROM total_orders;

---
INSERT INTO orders (customer_id, status) VALUES
(1, false);


---Оновлення матеріалізованої вьюхи

REFRESH MATERIALIZED VIEW total_orders;


--Функція, яка оновлює вьюху при виклику

CREATE FUNCTION refresh_mat_view()
RETURNS void
AS
$$
BEGIN
    REFRESH MATERIALIZED VIEW total_orders;
END;
$$
LANGUAGE plpgsql

SELECT refresh_mat_view();


-- Видалення матеріалізованої вьюхи

DROP MATERIALIZED VIEW total_orders;

--

DROP FUNCTION refresh_materialized_view;



