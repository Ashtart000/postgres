ALTER TABLE orders ADD COLUMN status boolean; 

UPDATE orders SET status = true WHERE id % 2 = 0;

UPDATE orders SET status = false WHERE id % 2 != 0 RETURNING *;

SELECT id, created_at, customer_id, status AS order_status
FROM orders; ---- alias for attribute


------------CASE
---1 syntax----
/*
CASE
    WHEN condition1 = true THEN result1
    WHEN condition2 = true THEN result2
    .....
    ELSE result3
END
*/

/* ЗАДАЧА: Вивести всі замовлення, там де статус "true" - написати "виконано"
   а якщо false - написати "нове" */

SELECT id, created_at, customer_id, status,
    CASE 
        WHEN status = true THEN 'done'
        WHEN status = false THEN 'new'
        ELSE 'other'
    END AS order_status
FROM orders
ORDER BY id;


/* OR
SELECT id, created_at, customer_id, status,
    CASE 
        WHEN status = true OR status = false THEN 'done'
        
        ELSE 'other'
    END AS order_status
FROM orders
ORDER BY id;
*/



------2 syntax------
/*
CASE condition
    WHEN value1 THEN result1
    WHEN value2 THEN result2
    .........
    ELSE default_result
END
*/

/*
ЗАДАЧА: Витягти місяць народження юзера і на його основі вивести, народився юзер восени
, навесні, влітку чи взимку
*/

SELECT first_name, last_name, extract ('month' from age(birthday)),
    CASE extract ('month' from age(birthday))
        WHEN 01 THEN 'winter'
        WHEN 02 THEN 'winter'
        WHEN 03 THEN 'spring'
        WHEN 04 THEN 'spring'
        WHEN 05 THEN 'spring'
        WHEN 06 THEN 'summer'
        WHEN 07 THEN 'summer'
        WHEN 08 THEN 'summer'
        WHEN 09 THEN 'autumn'
        WHEN 10 THEN 'autumn'
        WHEN 11 THEN 'autumn'
        WHEN 12 THEN 'winter'
        ELSE 'other'
    END
FROM users;


SELECT first_name, last_name, extract ('years' from age(birthday)) AS age,
    CASE 
        WHEN extract ('years' from age(birthday)) < 18 THEN 'is not adult'
        WHEN extract ('years' from age(birthday)) >= 18 THEN 'is adult'
        ELSE 'unknown'
    END
FROM users;


SELECT brand, model, price,
CASE
WHEN price > 60000 THEN 'флагман'
WHEN price BETWEEN 20000 AND 60000 THEN 'середній клас'
WHEN price < 19999 THEN 'бюджетний'
ELSE 'невідомо'
END
FROM products;


SELECT u.id, first_name, last_name, email, count (o.id) AS "кількість замовлень", 
CASE
    WHEN count (o.id) >=3 THEN 'постійний клієнт'
    WHEN count (o.id) BETWEEN 1 AND 2 THEN 'активний клієнт'
    WHEN count (o.id) = 0 THEN 'новий клієнт'
    ELSE 'невідомо'
END AS "статус покупця"
FROM users AS u LEFT JOIN orders AS o
ON u.id = o.customer_id
GROUP BY u.id
ORDER BY count (o.id);


INSERT INTO users (
    first_name,
    last_name,
    email,
    biography,
    gender,
    is_subscribe,
    birthday,
    foot_size,
    height
  )
VALUES (
    'Alice',
    'Seleznyova',
    'seleznyova@gmail.com',
    'biography:text',
    'female',
    true,
    '2005-12-14',
    37,
    1.55
  );



--- Порахувати кількість товару, ціна якого > 3000

SELECT count(id) FROM products
WHERE price > 3000;

------
SELECT sum(
    CASE
        WHEN price > 3000 THEN 1
    END
) FROM products;


------COALESCE

SELECT COALESCE(NULL, 12, 24) --- 12
SELECT COALESCE(NULL, NULL, NULL) -- NULL

UPDATE products
SET description = 'Супер телефон з довгим описом'
WHERE id BETWEEN 217 and 228;


-- Якщо опис телефону є - виводимо цей опис
-- Якщо опису немає, то виводимо - "про цей товар нічого не відомо"

SELECT id, brand, model, price, COALESCE(description, 'Про цей товар нічого невідомо')
FROM products;


------NULLIF

SELECT NULLIF(NULL, NULL); --- NULL
SELECT NULLIF(12, 12); --- NULL
SELECT NULLIF(12, NULL); --- 12
SELECT NULLIF(NULL, 12); --- NULL


-----GREATEST , LEAST

-- GREATEST - найбільше зі списку аргументів
-- LEAST - найменше зі списку аргументів

SELECT GREATEST(5, 8, 2); -- 8
SELECT LEAST(5, 8, 2); -- 2

-- Задача: вивести всі товари
-- якщо є знижка у товару (discounted_price) - виводимо саме знижку
-- якщо знижки немає, виводимо звичайний price

SELECT id, brand, model, LEAST(price, discounted_price)
FROM products;